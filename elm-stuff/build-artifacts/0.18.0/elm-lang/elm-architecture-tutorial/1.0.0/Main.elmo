var _elm_lang$elm_architecture_tutorial$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AnimMsg':
				var _p2 = _p0._0;
				var _p1 = model.spin;
				if (_p1 === true) {
					return {
						ctor: '_Tuple2',
						_0: {x: model.x + (_p2 / 5000), y: model.y + (_p2 / 10000), spin: model.spin},
						_1: _elm_lang$core$Platform_Cmd$none
					};
				} else {
					return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			case 'KeyMsg':
				var _p3 = _p0._0;
				switch (_p3) {
					case 37:
						return {
							ctor: '_Tuple2',
							_0: {x: model.x - 1.0e-2, y: model.y, spin: model.spin},
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 39:
						return {
							ctor: '_Tuple2',
							_0: {x: model.x + 1.0e-2, y: model.y, spin: model.spin},
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 38:
						return {
							ctor: '_Tuple2',
							_0: {x: model.x, y: model.y - 1.0e-2, spin: model.spin},
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 40:
						return {
							ctor: '_Tuple2',
							_0: {x: model.x, y: model.y + 1.0e-2, spin: model.spin},
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: {x: model.x, y: model.y, spin: !model.spin},
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _elm_lang$elm_architecture_tutorial$Main$scene = F2(
	function (angleX, angleY) {
		return {
			ctor: '::',
			_0: A4(
				_elm_community$webgl$WebGL$entity,
				_elm_lang$elm_architecture_tutorial$VertexShader$vertexShader,
				_elm_lang$elm_architecture_tutorial$FragmentShader$fragmentShader,
				_elm_lang$elm_architecture_tutorial$Cube$cube,
				A2(_elm_lang$elm_architecture_tutorial$Uniforms$uniforms, angleX, angleY)),
			_1: {ctor: '[]'}
		};
	});
var _elm_lang$elm_architecture_tutorial$Main$twoViews = function (renderable) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_community$webgl$WebGL$toHtml,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$width(400),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$height(400),
						_1: {ctor: '[]'}
					}
				},
				renderable),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_community$webgl$WebGL$toHtml,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$width(400),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$height(400),
							_1: {ctor: '[]'}
						}
					},
					renderable),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$elm_architecture_tutorial$Main$Model = F3(
	function (a, b, c) {
		return {x: a, y: b, spin: c};
	});
var _elm_lang$elm_architecture_tutorial$Main$Spin = {ctor: 'Spin'};
var _elm_lang$elm_architecture_tutorial$Main$KeyMsg = function (a) {
	return {ctor: 'KeyMsg', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$AnimMsg = function (a) {
	return {ctor: 'AnimMsg', _0: a};
};
var _elm_lang$elm_architecture_tutorial$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _elm_lang$animation_frame$AnimationFrame$diffs(_elm_lang$elm_architecture_tutorial$Main$AnimMsg),
			_1: {
				ctor: '::',
				_0: _elm_lang$keyboard$Keyboard$downs(_elm_lang$elm_architecture_tutorial$Main$KeyMsg),
				_1: {ctor: '[]'}
			}
		});
};
var _elm_lang$elm_architecture_tutorial$Main$main = _elm_lang$html$Html$program(
	{
		init: {
			ctor: '_Tuple2',
			_0: {x: 0, y: 0, spin: false},
			_1: _elm_lang$core$Platform_Cmd$none
		},
		view: function (model) {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_community$webgl$WebGL$toHtml,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$width(400),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$height(400),
								_1: {ctor: '[]'}
							}
						},
						A2(_elm_lang$elm_architecture_tutorial$Main$scene, model.x, model.y)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$input,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_elm_lang$elm_architecture_tutorial$Main$Spin),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					}
				});
		},
		subscriptions: _elm_lang$elm_architecture_tutorial$Main$subscriptions,
		update: _elm_lang$elm_architecture_tutorial$Main$update
	})();

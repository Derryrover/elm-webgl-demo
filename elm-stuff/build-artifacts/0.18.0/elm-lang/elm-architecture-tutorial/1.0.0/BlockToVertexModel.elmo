var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$toBlackFacesAndSingleColorFace = function (cBF) {
	return {
		black: {
			ctor: '::',
			_0: cBF.black,
			_1: {
				ctor: '::',
				_0: cBF.color.top,
				_1: {
					ctor: '::',
					_0: cBF.color.down,
					_1: {
						ctor: '::',
						_0: cBF.color.left,
						_1: {
							ctor: '::',
							_0: cBF.color.right,
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		color: _elm_lang$core$Maybe$Just(cBF.color.center)
	};
};
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$getVertexFromDirection = F2(
	function (allSide, dir) {
		var _p0 = dir;
		switch (_p0.ctor) {
			case 'Top':
				return {black: allSide.down.black, color: allSide.top.color};
			case 'Down':
				return {black: allSide.top.black, color: allSide.down.color};
			case 'Left':
				return {black: allSide.right.black, color: allSide.left.color};
			case 'Right':
				return {black: allSide.left.black, color: allSide.right.color};
			case 'Front':
				return {black: allSide.back.black, color: allSide.front.color};
			default:
				return {black: allSide.front.black, color: allSide.back.color};
		}
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace = F2(
	function (f, _p1) {
		var _p2 = _p1;
		return {
			ctor: '_Tuple4',
			_0: f(_p2._0),
			_1: f(_p2._1),
			_2: f(_p2._2),
			_3: f(_p2._3)
		};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorFace = F2(
	function (f, _p3) {
		var _p4 = _p3;
		return {
			center: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p4.center),
			top: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p4.top),
			down: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p4.down),
			left: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p4.left),
			right: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p4.right)
		};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces = F2(
	function (f, _p5) {
		var _p6 = _p5;
		return {
			black: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapFace, f, _p6.black),
			color: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorFace, f, _p6.color)
		};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapAllSideFaces = F2(
	function (f, rec) {
		return {
			front: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.front),
			back: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.back),
			left: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.left),
			right: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.right),
			top: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.top),
			down: A2(_elm_lang$elm_architecture_tutorial$BlockToVertexModel$mapColorBlackFaces, f, rec.down)
		};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$ColorFace = F5(
	function (a, b, c, d, e) {
		return {center: a, top: b, down: c, left: d, right: e};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$ColorBlackFaces = F2(
	function (a, b) {
		return {black: a, color: b};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$AllSideFaces = F6(
	function (a, b, c, d, e, f) {
		return {front: a, back: b, left: c, right: d, top: e, down: f};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$BlackFacesAndSingleColorFace = F2(
	function (a, b) {
		return {black: a, color: b};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$XYZColorsListBlack = F4(
	function (a, b, c, d) {
		return {x: a, y: b, z: c, black: d};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$VertexListPlusColors = F4(
	function (a, b, c, d) {
		return {x: a, y: b, z: c, black: d};
	});
var _elm_lang$elm_architecture_tutorial$BlockToVertexModel$VertexListPlusFace3Colors = F4(
	function (a, b, c, d) {
		return {x: a, y: b, z: c, black: d};
	});

var _elm_lang$elm_architecture_tutorial$SpinCubeGl$scenePicker = function (model) {
	var blocks = model.picker;
	var vertexes = _elm_lang$core$List$concat(
		A2(_elm_lang$core$List$map, _elm_lang$elm_architecture_tutorial$BlockToVertex$singleBlockToVertexList, blocks));
	var triangles = _elm_community$webgl$WebGL$triangles(vertexes);
	return {
		ctor: '::',
		_0: A4(
			_elm_community$webgl$WebGL$entity,
			_elm_lang$elm_architecture_tutorial$VertexShader$vertexShader,
			_elm_lang$elm_architecture_tutorial$FragmentShader$fragmentShader,
			triangles,
			_elm_lang$elm_architecture_tutorial$Uniforms$uniformsNoShade(model.rotationMatrix)),
		_1: {ctor: '[]'}
	};
};
var _elm_lang$elm_architecture_tutorial$SpinCubeGl$sceneRest = function (model) {
	var _p0 = model.lastMove;
	var row = _p0.row;
	var turn = _p0.turn;
	var axis = _p0.axis;
	var blocks = A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$excludeRowFromBlocks, row, axis, model.cube);
	var vertexes = _elm_lang$core$List$concat(
		A2(_elm_lang$core$List$map, _elm_lang$elm_architecture_tutorial$BlockToVertex$singleBlockToVertexList, blocks));
	var triangles = _elm_community$webgl$WebGL$triangles(vertexes);
	return {
		ctor: '::',
		_0: A4(
			_elm_community$webgl$WebGL$entity,
			_elm_lang$elm_architecture_tutorial$VertexShader$vertexShader,
			_elm_lang$elm_architecture_tutorial$FragmentShader$fragmentShader,
			triangles,
			_elm_lang$elm_architecture_tutorial$Uniforms$uniforms(model.rotationMatrix)),
		_1: {ctor: '[]'}
	};
};
var _elm_lang$elm_architecture_tutorial$SpinCubeGl$sceneSpinRow = function (model) {
	var _p1 = model.lastMove;
	var row = _p1.row;
	var turn = _p1.turn;
	var axis = _p1.axis;
	var blocks = A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowFromBlocks, row, axis, model.cube);
	var vertexes = _elm_lang$core$List$concat(
		A2(_elm_lang$core$List$map, _elm_lang$elm_architecture_tutorial$BlockToVertex$singleBlockToVertexList, blocks));
	var triangles = _elm_community$webgl$WebGL$triangles(vertexes);
	return {
		ctor: '::',
		_0: A4(
			_elm_community$webgl$WebGL$entity,
			_elm_lang$elm_architecture_tutorial$VertexShader$vertexShader,
			_elm_lang$elm_architecture_tutorial$FragmentShader$fragmentShader,
			triangles,
			A4(_elm_lang$elm_architecture_tutorial$Uniforms$uniformsRow, model.rotationMatrix, model.movingRowAngle, axis, turn)),
		_1: {ctor: '[]'}
	};
};

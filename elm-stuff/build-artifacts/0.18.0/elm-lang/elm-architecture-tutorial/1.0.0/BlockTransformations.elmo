var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnZAnti = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1.rows;
	var _p2 = _p1.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p3,
			{x: _p3.y, y: _p3.x * -1}),
		colors: _elm_lang$core$Native_Utils.update(
			_p2,
			{x: _p2.y, y: _p2.x})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnZClock = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5.rows;
	var _p6 = _p5.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p7,
			{x: _p7.y * -1, y: _p7.x}),
		colors: _elm_lang$core$Native_Utils.update(
			_p6,
			{x: _p6.y, y: _p6.x})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnYAnti = function (_p8) {
	var _p9 = _p8;
	var _p11 = _p9.rows;
	var _p10 = _p9.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p11,
			{x: _p11.z * -1, z: _p11.x}),
		colors: _elm_lang$core$Native_Utils.update(
			_p10,
			{x: _p10.z, z: _p10.x})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnYClock = function (_p12) {
	var _p13 = _p12;
	var _p15 = _p13.rows;
	var _p14 = _p13.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p15,
			{x: _p15.z, z: _p15.x * -1}),
		colors: _elm_lang$core$Native_Utils.update(
			_p14,
			{x: _p14.z, z: _p14.x})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnXAnti = function (_p16) {
	var _p17 = _p16;
	var _p19 = _p17.rows;
	var _p18 = _p17.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p19,
			{y: _p19.z, z: _p19.y * -1}),
		colors: _elm_lang$core$Native_Utils.update(
			_p18,
			{y: _p18.z, z: _p18.y})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnXClock = function (_p20) {
	var _p21 = _p20;
	var _p23 = _p21.rows;
	var _p22 = _p21.colors;
	return {
		rows: _elm_lang$core$Native_Utils.update(
			_p23,
			{y: _p23.z * -1, z: _p23.y}),
		colors: _elm_lang$core$Native_Utils.update(
			_p22,
			{y: _p22.z, z: _p22.y})
	};
};
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnSingleBlock = F3(
	function (axis, turn, block) {
		var _p24 = axis;
		switch (_p24.ctor) {
			case 'X':
				var _p25 = turn;
				if (_p25.ctor === 'Clock') {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnXClock(block);
				} else {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnXAnti(block);
				}
			case 'Y':
				var _p26 = turn;
				if (_p26.ctor === 'Clock') {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnYClock(block);
				} else {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnYAnti(block);
				}
			default:
				var _p27 = turn;
				if (_p27.ctor === 'Clock') {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnZClock(block);
				} else {
					return _elm_lang$elm_architecture_tutorial$BlockTransformations$turnZAnti(block);
				}
		}
	});
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnListOfBlocks = F3(
	function (axis, turn, blocks) {
		return A2(
			_elm_lang$core$List$map,
			A2(_elm_lang$elm_architecture_tutorial$BlockTransformations$turnSingleBlock, axis, turn),
			blocks);
	});
var _elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowSingleBlock = F3(
	function (row, axis, block) {
		var _p28 = axis;
		switch (_p28.ctor) {
			case 'X':
				return _elm_lang$core$Native_Utils.eq(row, block.rows.x);
			case 'Y':
				return _elm_lang$core$Native_Utils.eq(row, block.rows.y);
			default:
				return _elm_lang$core$Native_Utils.eq(row, block.rows.z);
		}
	});
var _elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowFromBlocks = F3(
	function (row, axis, list) {
		return A2(
			_elm_lang$core$List$filter,
			A2(_elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowSingleBlock, row, axis),
			list);
	});
var _elm_lang$elm_architecture_tutorial$BlockTransformations$excludeRowFromBlocks = F3(
	function (row, axis, list) {
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return !A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowSingleBlock, row, axis, item);
			},
			list);
	});
var _elm_lang$elm_architecture_tutorial$BlockTransformations$turnRow = F2(
	function (_p29, blocks) {
		var _p30 = _p29;
		var _p32 = _p30.row;
		var _p31 = _p30.axis;
		var update = A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$filterRowFromBlocks, _p32, _p31, blocks);
		var matrix = A2(
			_elm_lang$core$List$map,
			function (item) {
				return _elm_lang$core$Native_Utils.update(
					item,
					{
						rows: A2(_elm_lang$elm_architecture_tutorial$BlockModel$mapXYZ, _elm_lang$elm_architecture_tutorial$BlockToMatrixCoordinates$toMatrix, item.rows)
					});
			},
			update);
		var updated = A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$turnListOfBlocks, _p31, _p30.turn, matrix);
		var unMatrix = A2(
			_elm_lang$core$List$map,
			function (item) {
				return _elm_lang$core$Native_Utils.update(
					item,
					{
						rows: A2(_elm_lang$elm_architecture_tutorial$BlockModel$mapXYZ, _elm_lang$elm_architecture_tutorial$BlockToMatrixCoordinates$fromMatrix, item.rows)
					});
			},
			updated);
		var leave = A3(_elm_lang$elm_architecture_tutorial$BlockTransformations$excludeRowFromBlocks, _p32, _p31, blocks);
		return _elm_lang$core$List$concat(
			{
				ctor: '::',
				_0: leave,
				_1: {
					ctor: '::',
					_0: unMatrix,
					_1: {ctor: '[]'}
				}
			});
	});
